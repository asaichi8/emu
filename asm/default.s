; Compile: ca65 default.s -o default.o && ld65 -t nes -o default.nes default.o
.segment "HEADER"
  .byte "NES", $1A      ; 4 byte NES header
  .byte 02              ; PRG_ROM is 32kb
  .byte 01              ; CHR_ROM is 8kb
  .byte $00             ; flag 6
  .byte $00             ; flag 7
  .byte $00, $00, $00, $00, $00, $00, $00, $00 ; pad, header is 16 bytes

.segment "VECTORS"
  .word NMI
  .word RESET
  .word IRQ

.segment "CODE"
RESET:
  SEI                   ; prevent IRQ
  CLD                   ; disable decimal mode
  LDA #$00
  STA $2000             ; disable nmi
  STA $2001             ; disable rendering
  STA $4015             ; disable apu
  STA $4010             ; disable dmc irq
  LDA #$40
  STA $4017             ; disable apu irq
  LDX #$FF
  TXS                   ; init stack
WaitVBLANK:
  BIT $2002             ; check if vblank on
  BPL WaitVBLANK

  LDA $2002             ; reset ppu addr latch
                        ; load address 0x2000 into ppu address register (nametable index 0)
  LDA #$20
  STA $2006
  LDA #$00
  STA $2006

  ; set up loop counter
  LDX #$00              ; high byte (page)
  LDY #$00              ; low byte

  ;
  LDA #<ro_data
  STA zpPtr             ; load low byte of ro_data into zpPtr
  LDA #>ro_data
  STA zpPtr+1           ; load high byte

FillNameTable:
  LDA (zpPtr), Y        ; load the contents of zpPtr, indexed by Y
  STA $2007             ; load into ppu data
  INY                   ; increment index Y
  BNE FillNameTable     ; if we didn't overflow back to 0, loop back to FillNameTable
                        ; we overflowed, so we should increase the page
  INX                   ; increment X which keeps track of what page we're on
  INC zpPtr+1           ; increment the high byte of zpPtr (the page)
  CPX #$04              ; check if we've completed 4 loops of 256
  BNE FillNameTable     ; if we haven't, loop back. otherwise, continue

  LDA $2002             ; reset ppu addr latch
  ; load address 0x3F00 into ppu address register (palette table index 0)
  LDA #$3F
  STA $2006
  LDA #$00
  STA $2006

  ; set up loop counter
  LDY #$00
FillPaletteTable:
  LDA palette_data,Y    ; load the palette table data indexed by Y
  STA $2007             ; load into ppu data
  INY
  CPY #$20              ; check if we wrote 32 bytes
  BNE FillPaletteTable  ; if not, continue loop

  ; begin rendering
  LDA #%10000000        ; toggle VBLANK_NMI bit in ppu ctrl reg
  STA $2000             ; write to ppu ctrl
  LDA #%00011110        ; toggle LEFT_BACKGROUND, LEFT_SPRITES, BACKGROUND, SPRITES
  STA $2001             ; write to ppu mask
InfiniteLoop:
  JMP InfiniteLoop

NMI:
  RTI

IRQ:
  RTI

.segment "RODATA"
ro_data: ; nametable
 ; Generated with PPM2NES
  .bytea,$0b,$0c,$0d,$00,$0e,$0f,$10,$11,$12,$00,$13,$14,$15,$16,$17,$18,$19,$00,$00,$00,$00,$00,$1a,$1b,$1c,$1d,$1e,$1f,$20,$21,$22,$23,$24,$25,$26,$00,$27,$28,$29,$2a,$2b,$00,$2c,$2d,$2e,$2f,$30,$31,$32,$33,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$34,$35
  .repeat $01b1
    .byte $00
  .endrepeat

palette_data:
  .repeat $08 ; only using one colour currently
    .byte $0F,$15,$26,$37 ; pink colour
  .endrepeat

.segment "CHR"
chr_data:
 ; Generated with PPM2NES
  .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $00
  .byte $00,$00,$3f,$3f,$0c,$0c,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $01
  .byte $00,$00,$03,$03,$30,$30,$30,$30,$00,$00,$00,$00,$00,$00,$00,$00		; $02
  .byte $00,$00,$f0,$f0,$c0,$c0,$c0,$c0,$00,$00,$00,$00,$00,$00,$00,$00		; $03
  .byte $00,$00,$00,$00,$fc,$fc,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00		; $04
  .byte $00,$00,$00,$00,$00,$00,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00		; $05
  .byte $00,$00,$c0,$c0,$00,$00,$c0,$c0,$00,$00,$00,$00,$00,$00,$00,$00		; $06
  .byte $00,$00,$0c,$0c,$0c,$0c,$ff,$ff,$00,$00,$00,$00,$00,$00,$00,$00		; $07
  .byte $00,$00,$00,$00,$00,$00,$c0,$c0,$00,$00,$00,$00,$00,$00,$00,$00		; $08
  .byte $00,$00,$30,$30,$00,$00,$f0,$f0,$00,$00,$00,$00,$00,$00,$00,$00		; $09
  .byte $00,$00,$00,$00,$3c,$3c,$0f,$0f,$00,$00,$00,$00,$00,$00,$00,$00		; $0a
  .byte $00,$00,$00,$00,$f0,$f0,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $0b
  .byte $00,$00,$00,$00,$03,$03,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $0c
  .byte $00,$00,$00,$00,$f0,$f0,$30,$30,$00,$00,$00,$00,$00,$00,$00,$00		; $0d
  .byte $00,$00,$03,$03,$0c,$0c,$ff,$ff,$00,$00,$00,$00,$00,$00,$00,$00		; $0e
  .byte $00,$00,$f0,$f0,$00,$00,$c3,$c3,$00,$00,$00,$00,$00,$00,$00,$00		; $0f
  .byte $00,$00,$00,$00,$fc,$fc,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00		; $10
  .byte $00,$00,$00,$00,$33,$33,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $11
  .byte $00,$00,$00,$00,$f0,$f0,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $12
  .byte $00,$00,$3f,$3f,$0c,$0c,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $13
  .byte $00,$00,$f0,$f0,$0c,$0c,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $14
  .byte $00,$00,$03,$03,$0c,$0c,$30,$30,$00,$00,$00,$00,$00,$00,$00,$00		; $15
  .byte $00,$00,$f0,$f0,$0c,$0c,$0c,$0c,$00,$00,$00,$00,$00,$00,$00,$00		; $16
  .byte $00,$00,$f0,$f0,$3c,$3c,$33,$33,$00,$00,$00,$00,$00,$00,$00,$00		; $17
  .byte $00,$00,$03,$03,$0f,$0f,$33,$33,$00,$00,$00,$00,$00,$00,$00,$00		; $18
  .byte $00,$00,$c0,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $19
  .byte $0c,$0c,$0c,$0c,$0c,$0c,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00		; $1a
  .byte $30,$30,$30,$30,$30,$30,$cf,$cf,$00,$00,$00,$00,$00,$00,$00,$00		; $1b
  .byte $c0,$c0,$c3,$c3,$c3,$c3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $1c
  .byte $ff,$ff,$03,$03,$03,$03,$ff,$ff,$00,$00,$00,$00,$00,$00,$00,$00		; $1d
  .byte $00,$00,$00,$00,$00,$00,$cf,$cf,$00,$00,$00,$00,$00,$00,$00,$00		; $1e
  .byte $c0,$c0,$c0,$c0,$c0,$c0,$fc,$fc,$00,$00,$00,$00,$00,$00,$00,$00		; $1f
  .byte $0c,$0c,$0c,$0c,$0c,$0c,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00		; $20
  .byte $00,$00,$30,$30,$30,$30,$c3,$c3,$00,$00,$00,$00,$00,$00,$00,$00		; $21
  .byte $30,$30,$30,$30,$30,$30,$ff,$ff,$00,$00,$00,$00,$00,$00,$00,$00		; $22
  .byte $0c,$0c,$0c,$0c,$0c,$0c,$3f,$3f,$00,$00,$00,$00,$00,$00,$00,$00		; $23
  .byte $0c,$0c,$0c,$0c,$0c,$0c,$3f,$3f,$00,$00,$00,$00,$00,$00,$00,$00		; $24
  .byte $30,$30,$30,$30,$0f,$0f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $25
  .byte $30,$30,$30,$30,$f0,$f0,$30,$30,$00,$00,$00,$00,$00,$00,$00,$00		; $26
  .byte $0c,$0c,$0c,$0c,$0c,$0c,$3f,$3f,$00,$00,$00,$00,$00,$00,$00,$00		; $27
  .byte $03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $28
  .byte $03,$03,$03,$03,$03,$03,$fc,$fc,$00,$00,$00,$00,$00,$00,$00,$00		; $29
  .byte $0c,$0c,$0c,$0c,$0c,$0c,$3f,$3f,$00,$00,$00,$00,$00,$00,$00,$00		; $2a
  .byte $30,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $2b
  .byte $0f,$0f,$0c,$0c,$0c,$0c,$3f,$3f,$00,$00,$00,$00,$00,$00,$00,$00		; $2c
  .byte $f0,$f0,$30,$30,$0c,$0c,$3f,$3f,$00,$00,$00,$00,$00,$00,$00,$00		; $2d
  .byte $30,$30,$30,$30,$30,$30,$0f,$0f,$00,$00,$00,$00,$00,$00,$00,$00		; $2e
  .byte $0c,$0c,$0c,$0c,$30,$30,$c0,$c0,$00,$00,$00,$00,$00,$00,$00,$00		; $2f
  .byte $30,$30,$30,$30,$30,$30,$fc,$fc,$00,$00,$00,$00,$00,$00,$00,$00		; $30
  .byte $c3,$c3,$c3,$c3,$03,$03,$0f,$0f,$00,$00,$00,$00,$00,$00,$00,$00		; $31
  .byte $00,$00,$00,$00,$00,$00,$cc,$cc,$00,$00,$00,$00,$00,$00,$00,$00		; $32
  .byte $00,$00,$00,$00,$00,$00,$cc,$cc,$00,$00,$00,$00,$00,$00,$00,$00		; $33
  .byte $0f,$0f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $34
  .byte $c0,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00		; $35

 .segment "ZEROPAGE"
   zpPtr: .res 2
